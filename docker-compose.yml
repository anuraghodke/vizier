version: '3.8'

services:
  # Redis - Message broker for Celery
  redis:
    image: redis:7-alpine
    container_name: vizier-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend - FastAPI server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vizier-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - ./models/film:/models/film:ro  # Read-only FILM model
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker - Async task processing
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vizier-celery-worker
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - ./models/film:/models/film:ro  # Read-only FILM model
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    command: celery -A app.workers.celery_worker worker --loglevel=info --concurrency=1

  # Frontend - Next.js development server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vizier-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent overwriting node_modules
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
    depends_on:
      - backend
    command: npm run dev

volumes:
  redis_data:
    driver: local
