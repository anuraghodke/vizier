"""
Pydantic models for request/response validation and data structures.
"""
from typing import List, Optional, Literal
from pydantic import BaseModel, Field, field_validator


class AnimationParams(BaseModel):
    """
    Structured animation parameters parsed from natural language instructions.
    Generated by Claude API.
    """
    num_frames: int = Field(
        ...,
        ge=4,
        le=32,
        description="Number of intermediate frames to generate (4-32)"
    )
    motion_type: Literal[
        "linear",
        "ease-in",
        "ease-out",
        "ease-in-out",
        "bounce",
        "elastic"
    ] = Field(
        ...,
        description="Type of motion/easing for interpolation"
    )
    speed: Literal[
        "very-slow",
        "slow",
        "normal",
        "fast",
        "very-fast"
    ] = Field(
        default="normal",
        description="Relative speed of animation"
    )
    emphasis: str = Field(
        ...,
        max_length=200,
        description="Brief description of animation emphasis or style"
    )
    interpolation_times: Optional[List[float]] = Field(
        default=None,
        description="Optional custom interpolation times (0.0 to 1.0)"
    )

    @field_validator("interpolation_times")
    @classmethod
    def validate_times(cls, v):
        """Ensure interpolation times are in valid range [0, 1]"""
        if v is not None:
            for t in v:
                if not 0.0 <= t <= 1.0:
                    raise ValueError(f"Interpolation time {t} must be between 0.0 and 1.0")
        return v

    class Config:
        json_schema_extra = {
            "example": {
                "num_frames": 8,
                "motion_type": "bounce",
                "speed": "normal",
                "emphasis": "Bouncy ball physics with elastic landing",
                "interpolation_times": [0.0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0]
            }
        }


class JobStatus(BaseModel):
    """
    Job status response for tracking animation generation progress.
    """
    job_id: str = Field(..., description="Unique job identifier (UUID4)")
    status: Literal["pending", "processing", "complete", "failed"] = Field(
        ...,
        description="Current job status"
    )
    progress: int = Field(
        ...,
        ge=0,
        le=100,
        description="Progress percentage (0-100)"
    )
    stage: Optional[Literal[
        "analyzing",
        "preprocessing",
        "generating",
        "complete"
    ]] = Field(
        default=None,
        description="Current processing stage"
    )
    frames: Optional[List[str]] = Field(
        default=None,
        description="List of generated frame filenames (available when complete)"
    )
    params: Optional[AnimationParams] = Field(
        default=None,
        description="Parsed animation parameters (available after analysis)"
    )
    error: Optional[str] = Field(
        default=None,
        description="Error message if job failed"
    )

    class Config:
        json_schema_extra = {
            "example": {
                "job_id": "550e8400-e29b-41d4-a716-446655440000",
                "status": "processing",
                "progress": 50,
                "stage": "generating",
                "frames": None,
                "params": {
                    "num_frames": 8,
                    "motion_type": "bounce",
                    "speed": "normal",
                    "emphasis": "Bouncy animation"
                },
                "error": None
            }
        }


class GenerateRequest(BaseModel):
    """
    Request model for animation generation (used for documentation).
    Actual endpoint uses multipart/form-data with files.
    """
    instruction: str = Field(
        ...,
        min_length=5,
        max_length=500,
        description="Natural language animation instruction"
    )

    class Config:
        json_schema_extra = {
            "example": {
                "instruction": "create 8 bouncy frames with smooth motion"
            }
        }


class GenerateResponse(BaseModel):
    """
    Response after submitting animation generation request.
    """
    job_id: str = Field(..., description="Job ID for tracking progress")
    status: str = Field(default="queued", description="Initial job status")

    class Config:
        json_schema_extra = {
            "example": {
                "job_id": "550e8400-e29b-41d4-a716-446655440000",
                "status": "queued"
            }
        }
